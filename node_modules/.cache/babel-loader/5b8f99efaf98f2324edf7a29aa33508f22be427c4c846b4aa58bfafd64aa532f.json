{"ast":null,"code":"const findTileIndex = (board, tile) => {\n  let boardIndex;\n  let rowIndex;\n  board.some((r, i) => {\n    const result = r.some((t, i2) => {\n      if (t.tile[0] === tile.tile[0] && t.tile[1] === tile.tile[1]) {\n        rowIndex = i2; // capture index and break\n        return true;\n      }\n    });\n    if (result) {\n      boardIndex = i; // capture index and break\n      return;\n    }\n  });\n  return [boardIndex, rowIndex];\n};\nexport default findTileIndex;","map":{"version":3,"names":["findTileIndex","board","tile","boardIndex","rowIndex","some","r","i","result","t","i2"],"sources":["/home/domuen/Documents/random code/chess-js/src/helpers/find-tile-index.ts"],"sourcesContent":["import { ChessBoard, Tile } from \"../types\";\n\nconst findTileIndex = (board: ChessBoard, tile: Tile) => {\n  let boardIndex: number | undefined;\n  let rowIndex: number | undefined;\n\n  board.some((r, i) => {\n    const result = r.some((t, i2) => {\n      if ((t.tile[0] === tile.tile[0]) && (t.tile[1] === tile.tile[1])) {\n        rowIndex = i2; // capture index and break\n        return true;\n      }\n    });\n\n    if (result) {\n      boardIndex = i;  // capture index and break\n      return;\n    }\n  });\n\n  return [boardIndex, rowIndex];\n};\n\nexport default findTileIndex;\n"],"mappings":"AAEA,MAAMA,aAAa,GAAGA,CAACC,KAAiB,EAAEC,IAAU,KAAK;EACvD,IAAIC,UAA8B;EAClC,IAAIC,QAA4B;EAEhCH,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACnB,MAAMC,MAAM,GAAGF,CAAC,CAACD,IAAI,CAAC,CAACI,CAAC,EAAEC,EAAE,KAAK;MAC/B,IAAKD,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,KAAKA,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,IAAMO,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,KAAKA,IAAI,CAACA,IAAI,CAAC,CAAC,CAAE,EAAE;QAChEE,QAAQ,GAAGM,EAAE,CAAC,CAAC;QACf,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAEF,IAAIF,MAAM,EAAE;MACVL,UAAU,GAAGI,CAAC,CAAC,CAAE;MACjB;IACF;EACF,CAAC,CAAC;EAEF,OAAO,CAACJ,UAAU,EAAEC,QAAQ,CAAC;AAC/B,CAAC;AAED,eAAeJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}