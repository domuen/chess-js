{"ast":null,"code":"import mL from \"./math-letter\";\n\n// currently hard coding move checks\n// will eventually switch to loops\n// also need conditional moves such as \n// pawn takes and preventing king check moves\n\nconst numArrIndex = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst checkAndPush = () => {};\nconst getKingMoves = (board, tile) => {\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([l, n + 1]);\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([l, n - 1]);\n  moveArray.push([mL(l, \"+\"), n - 1]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst getPawnMoves = (board, tile) => {\n  var _board, _board2;\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n  let boardIndex;\n  let rowIndex;\n  const foundTile = board.find((r, i) => {\n    const some = r.some((t, i2) => {\n      if (t.tile[0] === tile.tile[0] && t.tile[1] === tile.tile[1]) {\n        rowIndex = i2; // capture index and break\n        return true;\n      }\n    });\n    if (some) {\n      boardIndex = i; // capture index and break\n      return;\n    }\n  });\n  const leftDiagonal = (_board = board[boardIndex - 1]) === null || _board === void 0 ? void 0 : _board[rowIndex - 1];\n  const rightDiagonal = (_board2 = board[boardIndex - 1]) === null || _board2 === void 0 ? void 0 : _board2[rowIndex + 1];\n  if ((leftDiagonal === null || leftDiagonal === void 0 ? void 0 : leftDiagonal.white) !== tile.white) moveArray.push([mL(l, \"-\"), n + 1]);\n  if ((rightDiagonal === null || rightDiagonal === void 0 ? void 0 : rightDiagonal.white) !== tile.white) moveArray.push([mL(l, \"+\"), n + 1]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst getKnightMoves = (board, tile) => {\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n  moveArray.push([mL(l, \"-\"), n + 2]);\n  moveArray.push([mL(l, \"+\"), n + 2]);\n  moveArray.push([mL(l, \"+\", 2), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 1]);\n  moveArray.push([mL(l, \"+\"), n - 2]);\n  moveArray.push([mL(l, \"-\"), n - 2]);\n  moveArray.push([mL(l, \"-\", 2), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 1]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst getBishopMoves = (board, tile) => {\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n + 2]);\n  moveArray.push([mL(l, \"+\", 3), n + 3]);\n  moveArray.push([mL(l, \"+\", 4), n + 4]);\n  moveArray.push([mL(l, \"+\", 5), n + 5]);\n  moveArray.push([mL(l, \"+\", 6), n + 6]);\n  moveArray.push([mL(l, \"+\", 7), n + 7]);\n  moveArray.push([mL(l, \"+\"), n - 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 2]);\n  moveArray.push([mL(l, \"+\", 3), n - 3]);\n  moveArray.push([mL(l, \"+\", 4), n - 4]);\n  moveArray.push([mL(l, \"+\", 5), n - 5]);\n  moveArray.push([mL(l, \"+\", 6), n - 6]);\n  moveArray.push([mL(l, \"+\", 7), n - 7]);\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n - 2]);\n  moveArray.push([mL(l, \"-\", 3), n - 3]);\n  moveArray.push([mL(l, \"-\", 4), n - 4]);\n  moveArray.push([mL(l, \"-\", 5), n - 5]);\n  moveArray.push([mL(l, \"-\", 6), n - 6]);\n  moveArray.push([mL(l, \"-\", 7), n - 7]);\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 2]);\n  moveArray.push([mL(l, \"-\", 3), n + 3]);\n  moveArray.push([mL(l, \"-\", 4), n + 4]);\n  moveArray.push([mL(l, \"-\", 5), n + 5]);\n  moveArray.push([mL(l, \"-\", 6), n + 6]);\n  moveArray.push([mL(l, \"-\", 7), n + 7]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst getRookMoves = (board, tile) => {\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n  moveArray.push([l, n + 3]);\n  moveArray.push([l, n + 4]);\n  moveArray.push([l, n + 5]);\n  moveArray.push([l, n + 6]);\n  moveArray.push([l, n + 7]);\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"+\", 2), n]);\n  moveArray.push([mL(l, \"+\", 3), n]);\n  moveArray.push([mL(l, \"+\", 4), n]);\n  moveArray.push([mL(l, \"+\", 5), n]);\n  moveArray.push([mL(l, \"+\", 6), n]);\n  moveArray.push([mL(l, \"+\", 7), n]);\n  moveArray.push([l, n - 1]);\n  moveArray.push([l, n - 2]);\n  moveArray.push([l, n - 3]);\n  moveArray.push([l, n - 4]);\n  moveArray.push([l, n - 5]);\n  moveArray.push([l, n - 6]);\n  moveArray.push([l, n - 7]);\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"-\", 2), n]);\n  moveArray.push([mL(l, \"-\", 3), n]);\n  moveArray.push([mL(l, \"-\", 4), n]);\n  moveArray.push([mL(l, \"-\", 5), n]);\n  moveArray.push([mL(l, \"-\", 6), n]);\n  moveArray.push([mL(l, \"-\", 7), n]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst getQueenMoves = (board, tile) => {\n  const moveArray = [];\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  // top\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n  moveArray.push([l, n + 3]);\n  moveArray.push([l, n + 4]);\n  moveArray.push([l, n + 5]);\n  moveArray.push([l, n + 6]);\n  moveArray.push([l, n + 7]);\n\n  // top right diagonal\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n + 2]);\n  moveArray.push([mL(l, \"+\", 3), n + 3]);\n  moveArray.push([mL(l, \"+\", 4), n + 4]);\n  moveArray.push([mL(l, \"+\", 5), n + 5]);\n  moveArray.push([mL(l, \"+\", 6), n + 6]);\n  moveArray.push([mL(l, \"+\", 7), n + 7]);\n\n  // right\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"+\", 2), n]);\n  moveArray.push([mL(l, \"+\", 3), n]);\n  moveArray.push([mL(l, \"+\", 4), n]);\n  moveArray.push([mL(l, \"+\", 5), n]);\n  moveArray.push([mL(l, \"+\", 6), n]);\n  moveArray.push([mL(l, \"+\", 7), n]);\n\n  // bottom right diagonal\n  moveArray.push([mL(l, \"+\"), n - 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 2]);\n  moveArray.push([mL(l, \"+\", 3), n - 3]);\n  moveArray.push([mL(l, \"+\", 4), n - 4]);\n  moveArray.push([mL(l, \"+\", 5), n - 5]);\n  moveArray.push([mL(l, \"+\", 6), n - 6]);\n  moveArray.push([mL(l, \"+\", 7), n - 7]);\n\n  // bottom\n  moveArray.push([l, n - 1]);\n  moveArray.push([l, n - 2]);\n  moveArray.push([l, n - 3]);\n  moveArray.push([l, n - 4]);\n  moveArray.push([l, n - 5]);\n  moveArray.push([l, n - 6]);\n  moveArray.push([l, n - 7]);\n\n  // bottom left diagonal\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n - 2]);\n  moveArray.push([mL(l, \"-\", 3), n - 3]);\n  moveArray.push([mL(l, \"-\", 4), n - 4]);\n  moveArray.push([mL(l, \"-\", 5), n - 5]);\n  moveArray.push([mL(l, \"-\", 6), n - 6]);\n  moveArray.push([mL(l, \"-\", 7), n - 7]);\n\n  // left\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"-\", 2), n]);\n  moveArray.push([mL(l, \"-\", 3), n]);\n  moveArray.push([mL(l, \"-\", 4), n]);\n  moveArray.push([mL(l, \"-\", 5), n]);\n  moveArray.push([mL(l, \"-\", 6), n]);\n  moveArray.push([mL(l, \"-\", 7), n]);\n\n  // top left diagonal\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 2]);\n  moveArray.push([mL(l, \"-\", 3), n + 3]);\n  moveArray.push([mL(l, \"-\", 4), n + 4]);\n  moveArray.push([mL(l, \"-\", 5), n + 5]);\n  moveArray.push([mL(l, \"-\", 6), n + 6]);\n  moveArray.push([mL(l, \"-\", 7), n + 7]);\n  return moveArray.filter(t => !!t[0] && !!t[1]);\n};\nconst findMoveTiles = (board, tile) => {\n  if (tile.piece === 0) return getKingMoves(board, tile);\n  if (tile.piece === 1) return getPawnMoves(board, tile);\n  if (tile.piece === 2) return getKnightMoves(board, tile);\n  if (tile.piece === 3) return getBishopMoves(board, tile);\n  if (tile.piece === 4) return getRookMoves(board, tile);\n  if (tile.piece === 5) return getQueenMoves(board, tile);\n};\nexport default findMoveTiles;","map":{"version":3,"names":["mL","numArrIndex","checkAndPush","getKingMoves","board","tile","moveArray","l","n","push","filter","t","getPawnMoves","_board","_board2","boardIndex","rowIndex","foundTile","find","r","i","some","i2","leftDiagonal","rightDiagonal","white","getKnightMoves","getBishopMoves","getRookMoves","getQueenMoves","findMoveTiles","piece"],"sources":["/home/domuen/Documents/random code/chess-js/src/helpers/find-move-tiles.ts"],"sourcesContent":["import { PieceID, ColumnString, RowNumber, ChessBoard, Tile } from \"../types\";\nimport mL from \"./math-letter\";\n\n// currently hard coding move checks\n// will eventually switch to loops\n// also need conditional moves such as \n// pawn takes and preventing king check moves\n\nconst numArrIndex = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\nconst checkAndPush = () => { };\n\nconst getKingMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([l, n + 1]);\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([l, n - 1]);\n  moveArray.push([mL(l, \"+\"), n - 1]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n};\n\nconst getPawnMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n\n  let boardIndex: number | undefined;\n  let rowIndex: number | undefined;\n  const foundTile = board.find((r, i) => {\n    const some = r.some((t, i2) => {\n      if ((t.tile[0] === tile.tile[0]) && (t.tile[1] === tile.tile[1])) {\n        rowIndex = i2; // capture index and break\n        return true;\n      }\n    });\n\n    if (some) {\n      boardIndex = i;  // capture index and break\n      return;\n    }\n  });\n\n  const leftDiagonal = board[boardIndex! - 1]?.[rowIndex! - 1];\n  const rightDiagonal = board[boardIndex! - 1]?.[rowIndex! + 1];\n\n  if (leftDiagonal?.white !== tile.white) moveArray.push([mL(l, \"-\"), n + 1]);\n  if (rightDiagonal?.white !== tile.white) moveArray.push([mL(l, \"+\"), n + 1]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n};\n\nconst getKnightMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray: any[] = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  moveArray.push([mL(l, \"-\"), n + 2]);\n  moveArray.push([mL(l, \"+\"), n + 2]);\n  moveArray.push([mL(l, \"+\", 2), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 1]);\n  moveArray.push([mL(l, \"+\"), n - 2]);\n  moveArray.push([mL(l, \"-\"), n - 2]);\n  moveArray.push([mL(l, \"-\", 2), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 1]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n\n};\n\nconst getBishopMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray: any[] = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n + 2]);\n  moveArray.push([mL(l, \"+\", 3), n + 3]);\n  moveArray.push([mL(l, \"+\", 4), n + 4]);\n  moveArray.push([mL(l, \"+\", 5), n + 5]);\n  moveArray.push([mL(l, \"+\", 6), n + 6]);\n  moveArray.push([mL(l, \"+\", 7), n + 7]);\n\n  moveArray.push([mL(l, \"+\"), n - 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 2]);\n  moveArray.push([mL(l, \"+\", 3), n - 3]);\n  moveArray.push([mL(l, \"+\", 4), n - 4]);\n  moveArray.push([mL(l, \"+\", 5), n - 5]);\n  moveArray.push([mL(l, \"+\", 6), n - 6]);\n  moveArray.push([mL(l, \"+\", 7), n - 7]);\n\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n - 2]);\n  moveArray.push([mL(l, \"-\", 3), n - 3]);\n  moveArray.push([mL(l, \"-\", 4), n - 4]);\n  moveArray.push([mL(l, \"-\", 5), n - 5]);\n  moveArray.push([mL(l, \"-\", 6), n - 6]);\n  moveArray.push([mL(l, \"-\", 7), n - 7]);\n\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 2]);\n  moveArray.push([mL(l, \"-\", 3), n + 3]);\n  moveArray.push([mL(l, \"-\", 4), n + 4]);\n  moveArray.push([mL(l, \"-\", 5), n + 5]);\n  moveArray.push([mL(l, \"-\", 6), n + 6]);\n  moveArray.push([mL(l, \"-\", 7), n + 7]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n\n};\n\nconst getRookMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray: any[] = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n  moveArray.push([l, n + 3]);\n  moveArray.push([l, n + 4]);\n  moveArray.push([l, n + 5]);\n  moveArray.push([l, n + 6]);\n  moveArray.push([l, n + 7]);\n\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"+\", 2), n]);\n  moveArray.push([mL(l, \"+\", 3), n]);\n  moveArray.push([mL(l, \"+\", 4), n]);\n  moveArray.push([mL(l, \"+\", 5), n]);\n  moveArray.push([mL(l, \"+\", 6), n]);\n  moveArray.push([mL(l, \"+\", 7), n]);\n\n  moveArray.push([l, n - 1]);\n  moveArray.push([l, n - 2]);\n  moveArray.push([l, n - 3]);\n  moveArray.push([l, n - 4]);\n  moveArray.push([l, n - 5]);\n  moveArray.push([l, n - 6]);\n  moveArray.push([l, n - 7]);\n\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"-\", 2), n]);\n  moveArray.push([mL(l, \"-\", 3), n]);\n  moveArray.push([mL(l, \"-\", 4), n]);\n  moveArray.push([mL(l, \"-\", 5), n]);\n  moveArray.push([mL(l, \"-\", 6), n]);\n  moveArray.push([mL(l, \"-\", 7), n]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n\n};\n\nconst getQueenMoves = (board: ChessBoard, tile: Tile) => {\n  const moveArray: any[] = [];\n\n  const l = tile.tile[0];\n  const n = tile.tile[1];\n\n  // top\n  moveArray.push([l, n + 1]);\n  moveArray.push([l, n + 2]);\n  moveArray.push([l, n + 3]);\n  moveArray.push([l, n + 4]);\n  moveArray.push([l, n + 5]);\n  moveArray.push([l, n + 6]);\n  moveArray.push([l, n + 7]);\n\n  // top right diagonal\n  moveArray.push([mL(l, \"+\"), n + 1]);\n  moveArray.push([mL(l, \"+\", 2), n + 2]);\n  moveArray.push([mL(l, \"+\", 3), n + 3]);\n  moveArray.push([mL(l, \"+\", 4), n + 4]);\n  moveArray.push([mL(l, \"+\", 5), n + 5]);\n  moveArray.push([mL(l, \"+\", 6), n + 6]);\n  moveArray.push([mL(l, \"+\", 7), n + 7]);\n\n  // right\n  moveArray.push([mL(l, \"+\"), n]);\n  moveArray.push([mL(l, \"+\", 2), n]);\n  moveArray.push([mL(l, \"+\", 3), n]);\n  moveArray.push([mL(l, \"+\", 4), n]);\n  moveArray.push([mL(l, \"+\", 5), n]);\n  moveArray.push([mL(l, \"+\", 6), n]);\n  moveArray.push([mL(l, \"+\", 7), n]);\n\n  // bottom right diagonal\n  moveArray.push([mL(l, \"+\"), n - 1]);\n  moveArray.push([mL(l, \"+\", 2), n - 2]);\n  moveArray.push([mL(l, \"+\", 3), n - 3]);\n  moveArray.push([mL(l, \"+\", 4), n - 4]);\n  moveArray.push([mL(l, \"+\", 5), n - 5]);\n  moveArray.push([mL(l, \"+\", 6), n - 6]);\n  moveArray.push([mL(l, \"+\", 7), n - 7]);\n\n  // bottom\n  moveArray.push([l, n - 1]);\n  moveArray.push([l, n - 2]);\n  moveArray.push([l, n - 3]);\n  moveArray.push([l, n - 4]);\n  moveArray.push([l, n - 5]);\n  moveArray.push([l, n - 6]);\n  moveArray.push([l, n - 7]);\n\n  // bottom left diagonal\n  moveArray.push([mL(l, \"-\"), n - 1]);\n  moveArray.push([mL(l, \"-\", 2), n - 2]);\n  moveArray.push([mL(l, \"-\", 3), n - 3]);\n  moveArray.push([mL(l, \"-\", 4), n - 4]);\n  moveArray.push([mL(l, \"-\", 5), n - 5]);\n  moveArray.push([mL(l, \"-\", 6), n - 6]);\n  moveArray.push([mL(l, \"-\", 7), n - 7]);\n\n  // left\n  moveArray.push([mL(l, \"-\"), n]);\n  moveArray.push([mL(l, \"-\", 2), n]);\n  moveArray.push([mL(l, \"-\", 3), n]);\n  moveArray.push([mL(l, \"-\", 4), n]);\n  moveArray.push([mL(l, \"-\", 5), n]);\n  moveArray.push([mL(l, \"-\", 6), n]);\n  moveArray.push([mL(l, \"-\", 7), n]);\n\n  // top left diagonal\n  moveArray.push([mL(l, \"-\"), n + 1]);\n  moveArray.push([mL(l, \"-\", 2), n + 2]);\n  moveArray.push([mL(l, \"-\", 3), n + 3]);\n  moveArray.push([mL(l, \"-\", 4), n + 4]);\n  moveArray.push([mL(l, \"-\", 5), n + 5]);\n  moveArray.push([mL(l, \"-\", 6), n + 6]);\n  moveArray.push([mL(l, \"-\", 7), n + 7]);\n\n  return moveArray.filter(t => (!!t[0] && !!t[1]));\n\n};\n\nconst findMoveTiles = (board: ChessBoard, tile: Tile) => {\n  if (tile.piece === 0) return getKingMoves(board, tile);\n  if (tile.piece === 1) return getPawnMoves(board, tile);\n  if (tile.piece === 2) return getKnightMoves(board, tile);\n  if (tile.piece === 3) return getBishopMoves(board, tile);\n  if (tile.piece === 4) return getRookMoves(board, tile);\n  if (tile.piece === 5) return getQueenMoves(board, tile);\n}\n\nexport default findMoveTiles;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}